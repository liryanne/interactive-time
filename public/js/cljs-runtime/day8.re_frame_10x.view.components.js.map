{"version":3,"sources":["day8/re_frame_10x/view/components.cljs"],"mappings":"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","names":["p__34121","map__34122","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","day8.re-frame-10x.view.components/search-input","title","placeholder","on-save","on-change","on-stop","val","mranderson048.reagent.v0v8v0.reagent.core.atom","save","v","cljs.core/deref","clojure.string/trim","p1__34119#","p1__34120#","cljs.core/reset!","G__34130","day8.re-frame-10x.view.components/scroll!","el","start","end","time","goog.fx.dom/Scroll","cljs.core/clj->js","day8.re-frame-10x.view.components/scrolled-to-end?","tolerance","p__34134","map__34135","day8.re-frame-10x.view.components/autoscroll-list","class","scroll?","child","node","should-scroll","mranderson048.reagent.v0v8v0.reagent.core/create-class","_","and__4115__auto__","p__34147","map__34148","dom-node","day8.re-frame-10x.view.components/string->css","css-string","clojure.string.split","p1__34156#","cljs.core.map","cljs.core.reduce","p__34159","vec__34160","cljs.core.nth","acc","property","value","cljs.core.assoc","cljs.core.keyword","day8.re-frame-10x.view.components/default-cljs-devtools-prefs","devtools.prefs/default-config","day8.re-frame-10x.view.components/reset-wrapping","clojure.string/replace","day8.re-frame-10x.view.components/customized-cljs-devtools-prefs","day8.re-frame-10x.view.components/effective-cljs-devtools-prefs","cljs.core.merge","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","day8.re-frame-10x.view.components/make-devtools-api-call","seq34278","G__34279","cljs.core/first","cljs.core/next","self__4723__auto__","api-fn","args","previous-config__34110__auto__","devtools.prefs/get-prefs","prefs__34111__auto__","devtools.prefs/set-prefs!","cljs.core._EQ_","js/Error","day8.re-frame-10x.view.components/cljs-devtools-header","seq34284","self__4724__auto__","cljs.core/seq","devtools.formatters.core/header-api-call","day8.re-frame-10x.view.components/cljs-devtools-body","seq34292","devtools.formatters.core/body-api-call","day8.re-frame-10x.view.components/cljs-devtools-has-body","seq34298","devtools.formatters.core/has-body-api-call","day8.re-frame-10x.view.components/get-object","jsonml","day8.re-frame-10x.view.components/get-config","day8.re-frame-10x.view.components/data-structure","path","expanded?","G__34312","mranderson048.re-frame.v0v10v6.re-frame.core/subscribe","G__34316","mranderson048.re-frame.v0v10v6.re-frame.core/dispatch","day8.re_frame_10x.view.components.cljs_devtools_has_body","G__34318","G__34319","day8.re-frame-10x.view.components/jsonml->hiccup","day8.re_frame_10x.view.components.cljs_devtools_body","cljs.core.conj","G__34320","G__34321","day8.re_frame_10x.view.components.cljs_devtools_header","vec__34327","seq__34328","first__34329","tag-name","attributes","children","tagnames","cljs.core/contains?","cljs.core.into","cljs.core.js__GT_clj","cljs.core.map_indexed","i","G__34330","G__34331","day8.re-frame-10x.view.components/subtree","data","G__34338","day8.re-frame-10x.utils.re-com/v-box","day8.re-frame-10x.utils.re-com/h-box","clojure.string.join","G__34343","or__4126__auto__","cljs.core/boolean?","cljs.core.prn_str","day8.re-frame-10x.view.components/subscription-render","day8.re-frame-10x.view.components/simple-render","p__34349","vec__34350","seq34345","G__34346","G__34347","js/RegExp","day8.re-frame-10x.view.components/tag","label","day8.re-frame-10x.utils.re-com/box","day8.re-frame-10x.view.components/highlight","mranderson048.reagent.v0v8v0.reagent.core/adapt-react-class","js/Highlight"],"sourcesContent":["(ns day8.re-frame-10x.view.components\n  (:require [clojure.string :as str]\n            [goog.fx.dom :as fx]\n            [mranderson048.re-frame.v0v10v6.re-frame.core :as rf]\n            [clojure.string :as str]\n            [day8.re-frame-10x.utils.re-com :as rc]\n            [mranderson048.reagent.v0v8v0.reagent.core :as r]\n            [devtools.prefs]\n            [devtools.formatters.core]\n            [cljsjs.react-highlight]\n            [cljsjs.highlight.langs.clojure])\n  (:require-macros [day8.re-frame-10x.utils.macros :refer [with-cljs-devtools-prefs]]))\n\n(defn search-input [{:keys [title placeholder on-save on-change on-stop]}]\n  (let [val  (r/atom title)\n        save #(let [v (-> @val str str/trim)]\n                (when (pos? (count v))\n                  (on-save v)))]\n    (fn []\n      [:input {:type        \"text\"\n               :value       @val\n               :auto-focus  true\n               :placeholder placeholder\n               :size        (if (> 20 (count (str @val)))\n                              25\n                              (count (str @val)))\n               :on-change   #(do (reset! val (-> % .-target .-value))\n                                 (on-change %))\n               :on-key-down #(case (.-which %)\n                               13 (do\n                                    (save)\n                                    (reset! val \"\"))\n                               nil)}])))\n\n(defn scroll! [el start end time]\n  (.play (fx/Scroll. el (clj->js start) (clj->js end) time)))\n\n(defn scrolled-to-end? [el tolerance]\n  ;; at-end?: element.scrollHeight - element.scrollTop === element.clientHeight\n  (> tolerance (- (.-scrollHeight el) (.-scrollTop el) (.-clientHeight el))))\n\n(defn autoscroll-list [{:keys [class scroll?]} child]\n  \"Reagent component that enables scrolling for the elements of its child dom-node.\n   Scrolling is only enabled if the list is scrolled to the end.\n   Scrolling can be set as option for debugging purposes.\n   Thanks to Martin Klepsch! Original code can be found here:\n       https://gist.github.com/martinklepsch/440e6fd96714fac8c66d892e0be2aaa0\"\n  (let [node          (r/atom nil)\n        should-scroll (r/atom true)]\n    (r/create-class\n      {:display-name \"autoscroll-list\"\n       :component-did-mount\n                     (fn [_]\n                       (scroll! @node [0 (.-scrollTop @node)] [0 (.-scrollHeight @node)] 0))\n       :component-will-update\n                     (fn [_]\n                       (reset! should-scroll (scrolled-to-end? @node 100)))\n       :component-did-update\n                     (fn [_]\n                       (when (and scroll? @should-scroll)\n                         (scroll! @node [0 (.-scrollTop @node)] [0 (.-scrollHeight @node)] 500)))\n       :reagent-render\n                     (fn [{:keys [class]} child]\n                       [:div {:class class :ref (fn [dom-node]\n                                                  (reset! node dom-node))}\n                        child])})))\n\n;; Data browser\n\n(defn string->css [css-string]\n  \"This function converts jsonml css-strings to valid css maps for hiccup.\n  Example: 'margin-left:0px;min-height:14px;' converts to\n           {:margin-left '0px', :min-height '14px'}\"\n\n  (->> (str/split css-string #\";\")\n       (map #(str/split % #\":\"))\n       (reduce (fn [acc [property value]]\n                 (assoc acc (keyword property) value)) {})))\n\n(declare jsonml->hiccup)\n\n(def default-cljs-devtools-prefs @devtools.prefs/default-config)\n\n(defn reset-wrapping [css-string]\n  (str/replace css-string #\"white-space:nowrap;\" \"\"))\n\n(def customized-cljs-devtools-prefs\n  {; Override some cljs-devtools default styles.\n\n   ; The goal here is to make default styles more flexible and wrap at the edge of our panel (we don't want horizontal\n   ; scrolling). Technically we want to remove all 'white-space:no-wrap'.\n   ; See https://github.com/binaryage/cljs-devtools/blob/master/src/lib/devtools/defaults.cljs\n   ;; Commented out as this causes some other issues too.\n   ;:header-style (reset-wrapping (:header-style default-cljs-devtools-prefs))\n   ;:expandable-style (reset-wrapping (:expandable-style default-cljs-devtools-prefs))\n   ;:item-style (reset-wrapping (:item-style default-cljs-devtools-prefs))\n\n   ; Hide the index spans on the left hand of collections. Shows how many elements in a collection.\n   :none-style                     \"display: none\"\n   :index-tag                      [:span :none-style]\n   :min-expandable-sequable-count-for-well-known-types\n   3\n\n   ; Our JSON renderer does not have hierarchy depth limit,\n   ; See https://github.com/binaryage/cljs-devtools/blob/master/src/lib/devtools/formatters/budgeting.cljs\n   :initial-hierarchy-depth-budget false})\n\n(def effective-cljs-devtools-prefs (merge default-cljs-devtools-prefs customized-cljs-devtools-prefs))\n\n(defn make-devtools-api-call [api-fn & args]\n  (with-cljs-devtools-prefs effective-cljs-devtools-prefs\n    (apply api-fn args)))\n\n(defn cljs-devtools-header [& args]\n  (apply make-devtools-api-call devtools.formatters.core/header-api-call args))\n\n(defn cljs-devtools-body [& args]\n  (apply make-devtools-api-call devtools.formatters.core/body-api-call args))\n\n(defn cljs-devtools-has-body [& args]\n  (apply make-devtools-api-call devtools.formatters.core/has-body-api-call args))\n\n(defn get-object [jsonml]\n  (.-object (get jsonml 1)))\n\n(defn get-config [jsonml]\n  (.-config (get jsonml 1)))\n\n(defn data-structure [jsonml path]\n  (let [expanded? (rf/subscribe [:app-db/node-expanded? path])]\n    (fn [jsonml path]\n      [:span\n       {:class (str \"re-frame-10x--object\" (when @expanded? \" expanded\"))}\n       [:span {:class    \"toggle\"\n               :on-click #(rf/dispatch [:app-db/toggle-expansion path])}\n        [:button.expansion-button (if @expanded? \"\u25bc\" \"\u25b6\")]]\n       (if (and @expanded? (cljs-devtools-has-body (get-object jsonml) (get-config jsonml)))\n         (jsonml->hiccup\n           (cljs-devtools-body\n             (get-object jsonml)\n             (get-config jsonml))\n           (conj path :body))\n         (jsonml->hiccup\n           (cljs-devtools-header\n             (get-object jsonml)\n             (get-config jsonml))\n           (conj path :header)))])))\n\n(defn jsonml->hiccup\n  \"JSONML is the format used by Chrome's Custom Object Formatters.\n  The spec is at https://docs.google.com/document/d/1FTascZXT9cxfetuPRT2eXPQKXui4nWFivUnS_335T3U/preview.\n\n  JSONML is pretty much Hiccup over JSON. Chrome's implementation of this can\n  be found at https://cs.chromium.org/chromium/src/third_party/WebKit/Source/devtools/front_end/object_ui/CustomPreviewComponent.js\n  \"\n  [jsonml path]\n  (if (number? jsonml)\n    jsonml\n    (let [[tag-name attributes & children] jsonml\n          tagnames #{\"div\" \"span\" \"ol\" \"li\" \"table\" \"tr\" \"td\"}]\n      (cond\n        (contains? tagnames tag-name) (into\n                                        [(keyword tag-name) {:style (-> (js->clj attributes)\n                                                                        (get \"style\")\n                                                                        (string->css))}]\n                                        (map-indexed (fn [i child] (jsonml->hiccup child (conj path i))))\n                                        children)\n\n        (= tag-name \"object\") [data-structure jsonml path]\n        :else jsonml))))\n\n(defn subtree [data title path]\n  (let [expanded? (rf/subscribe [:app-db/node-expanded? path])]\n    (fn [data]\n      [rc/v-box\n       :children\n       [[rc/h-box\n         :align :center\n         :class (str/join \" \" [\"re-frame-10x--object\"\n                               (when @expanded? \"expanded\")])\n         :children\n         [[:span {:class    \"toggle\"\n                  :on-click #(rf/dispatch [:app-db/toggle-expansion path])}\n           [:button.expansion-button (if @expanded? \"\u25bc \" \"\u25b6 \")]]\n          (or title \"data\")]]\n        [rc/h-box\n         :children [[:div {:style {:margin-left 20}}\n                     (cond\n                       (and @expanded?\n                            (or (string? data)\n                                (number? data)\n                                (boolean? data)\n                                (nil? data))) [:div {:style {:margin \"10px 0\"}} (prn-str data)]\n                       @expanded? (jsonml->hiccup (cljs-devtools-header data) (conj path 0)))]]]]])))\n\n(defn subscription-render [data title path]\n  (let [expanded? (r/atom true) #_(rf/subscribe [:app-db/node-expanded? path])]\n    (fn [data]\n      [:div\n       {:class (str/join \" \" [\"re-frame-10x--object\"\n                              (when @expanded? \"expanded\")])}\n       #_[:span {:class    \"toggle\"\n                 :on-click #(rf/dispatch [:app-db/toggle-expansion path])}\n          [:button.expansion-button (if @expanded? \"\u25bc \" \"\u25b6 \")]]\n       (or title \"data\")\n       [:div {:style {:margin-left 20}}\n        (cond\n          (and @expanded?\n               (or (string? data)\n                   (number? data)\n                   (boolean? data)\n                   (nil? data))) [:div {:style {:margin \"10px 0\"}} (prn-str data)]\n          @expanded? (jsonml->hiccup (cljs-devtools-header data) (conj path 0)))]])))\n\n(defn simple-render [data path & [class]]\n  (let [expanded? (r/atom true) #_(rf/subscribe [:app-db/node-expanded? path])]\n    (fn [data]\n      [:div\n       {:class (str/join \" \" [\"re-frame-10x--object\"\n                              (when @expanded? \"expanded\")\n                              class])}\n       #_[:span {:class    \"toggle\"\n                 :on-click #(rf/dispatch [:app-db/toggle-expansion path])}\n          [:button.expansion-button (if @expanded? \"\u25bc \" \"\u25b6 \")]]\n       [:div #_{:style {:margin-left 20}}\n        (cond\n          (and @expanded?\n               (or (string? data)\n                   (instance? js/RegExp data)\n                   (number? data)\n                   (boolean? data)\n                   (nil? data))) [:div {:style {:margin \"10px 0\"}} (prn-str data)]\n          @expanded? (jsonml->hiccup (cljs-devtools-header data) (conj path 0)))]])))\n\n(defn tag [class label]\n  [rc/box\n   :class (str \"rft-tag noselect \" class)\n   :child [:span {:style {:margin \"auto\"}} label]])\n\n(def highlight (r/adapt-react-class js/Highlight))\n"]}