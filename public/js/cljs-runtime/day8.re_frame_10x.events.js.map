{"version":3,"sources":["day8/re_frame_10x/events.cljs"],"mappings":"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","names":["day8.re-frame-10x.events/fixed-after","f","G__39277","G__39278","G__39279","G__39280","mranderson048.re-frame.v0v10v6.re-frame.core/->interceptor","context","db","cljs.core/contains?","cljs.core.get_in","event","day8.re-frame-10x.events/log-trace?","trace","render-operation?","cljs.core._EQ_","component-path","clojure.string/includes?","day8.re-frame-10x.events/disable-tracing!","re-frame.trace/remove-trace-cb","day8.re-frame-10x.events/enable-tracing!","p1__39301#","re-frame.trace/register-trace-cb","G__39306","mranderson048.re-frame.v0v10v6.re-frame.core/dispatch","p__39311","vec__39312","seq__39313","cljs.core/seq","first__39314","cljs.core/first","cljs.core/next","day8.re-frame-10x.events/dissoc-in","m","k","ks","keys","temp__5733__auto__","nextmap","cljs.core.get","newmap","cljs.core.assoc","cljs.core.dissoc","day8.re-frame-10x.events/read-string-maybe","s","e39319","cljs.tools.reader.edn.read_string","e","mranderson048.re_frame.v0v10v6.re_frame.core.reg_event_db","p__39326","vec__39327","cljs.core.nth","_","width%","day8.re-frame-10x.utils.localstorage/save!","x__4214__auto__","y__4215__auto__","cljs.core/assoc-in","p__39330","vec__39331","width","p__39334","vec__39335","selected-tab","cljs.core.update_in","cljs.core/not","p__39342","vec__39343","show-panel?","day8.re-frame-10x.utils.localstorage/delete-all-keys!","js/location.reload","now-showing?","external-panel?","using-trace?","or__4126__auto__","p__39354","vec__39357","num-str","num","js/parseInt","js/isNaN","cljs.core/pos-int?","day8.re-frame-10x.events/ignored-event-mw","G__39369","mranderson048.re-frame.v0v10v6.re-frame.core/path","p1__39368#","ignored-events","id","cljs.core/random-uuid","js/Date.now","p__39378","vec__39379","p__39382","vec__39384","event-str","old-event","p__39395","vec__39396","day8.re-frame-10x.events/filtered-view-trace-mw","G__39401","p1__39399#","filtered-view-trace","p__39403","vec__39404","p__39407","vec__39408","ns-str","p__39411","vec__39412","day8.re-frame-10x.events/low-level-trace-mw","G__39416","p1__39415#","p__39417","vec__39418","low-level","p__39426","vec__39430","trace-type","capture?","p__39433","vec__39434","debug?","G__39439","p1__39438#","p__39440","vec__39441","follows-events?","day8.re-frame-10x.events/mount","popup-window","popup-document","app","resize-update-scheduled?","cljs.core.atom","handle-window-resize","cljs.core/deref","G__39456","reagent.impl.batching/next-tick","height","G__39460","cljs.core/reset!","handle-window-position","pos","map__39477","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","left","top","screen-left","screen-top","cljs.core.not_EQ_","G__39486","window-position-interval","unmount","G__39491","js/clearInterval","day8.re-frame-10x.styles/inject-trace-styles","goog.object/set","G__39500","mranderson048.reagent.v0v8v0.reagent.core.render","mranderson048.reagent.v0v8v0.reagent.core/create-class","js/setInterval","day8.re-frame-10x.view.container/devtools-inner","p__39504","map__39505","day8.re-frame-10x.events/open-debugger-window","dimensions","doc-title","js/document.title","new-window-title","goog.string/escapeString","new-window-html","w","js/window.open","d","temp__5735__auto__","el","mranderson048.reagent.v0v8v0.reagent.core/unmount-component-at-node","mranderson048.re_frame.v0v10v6.re_frame.core.reg_event_fx","ctx","G__39542","G__39545","p1__39541#","mranderson048.re-frame.v0v10v6.re-frame.core/after","p__39550","vec__39551","dim","new-dim","G__39555","G__39560","p1__39554#","p__39561","vec__39566","map__39569","G__39580","G__39585","p1__39579#","p__39590","vec__39591","map__39594","js/window.addEventListener","G__39610","mranderson048.re-frame.v0v10v6.re-frame.core/dispatch-sync","p__39619","vec__39620","unloading?","day8.re-frame-10x.events/save-filter-items","filter-items","p__39623","vec__39624","G__39631","p__39632","vec__39633","filter-input","filter-type","new-db","p1__39628#","cljs.core/some","p1__39629#","p1__39630#","cljs.core.remove","cljs.core.conj","clojure.string/lower-case","js/parseFloat","G__39640","p__39641","vec__39642","filter-id","p1__39639#","G__39648","trace-detail-expansions","cljs.core.update","G__39654","p__39655","vec__39656","expansions","showing?","p1__39653#","G__39659","p__39660","vec__39661","categories","new-categories","clojure.set/superset?","clojure.set.difference","clojure.set.union","G__39664","p__39665","vec__39666","G__39670","p1__39669#","p__39674","vec__39675","show-epoch-traces?","day8.re-frame-10x.events/app-db-path-mw","G__39679","p1__39678#","paths","p__39683","vec__39684","path-id","path-str","path","cljs.core/sequential?","clojure.string/blank?","p__39690","vec__39691","map__39696","valid-path?","cljs.core.pr_str","p__39702","vec__39703","open?","p__39706","vec__39707","diff?","p__39710","vec__39712","p__39717","vec__39718","p__39734","vec__39736","search-string","G__39741","p__39742","vec__39743","G__39746","p__39747","vec__39748","new-paths","cljs.core.disj","G__39751","re-frame.interop/reagent-id","re-frame.db/app-db","p__39764","vec__39765","new-id","epochs","match-id","day8.re-frame-10x.utils.utils/last-in-vec","match","day8.re-frame-10x.metamorphic/matched-event","temp__5739__auto__","day8.re-frame-10x.metamorphic/app-db-after","day8.re-frame-10x.events/first-match-id","p__39795","p__39796","map__39797","vec__39798","new-traces","filtered-traces","cljs.core.filter","cljs.core.sort_by","map__39803","number-of-epochs-to-retain","events-to-ignore","cljs.core/vals","cljs.core.map","cljs.core/set","previous-traces","parse-state","day8.re-frame-10x.metamorphic/initial-parse-state","drop-re-frame","drop-reagent","all-traces","cljs.core.reduce","cljs.core/conj","day8.re-frame-10x.metamorphic/parse-traces","new-matches","previous-matches","subscription-info","day8.re-frame-10x.metamorphic/subscription-info","sub-state","day8.re-frame-10x.metamorphic/initial-sub-state","subscription-match-state","day8.re-frame-10x.metamorphic/subscription-match-state","subscription-matches","cljs.core/rest","new-sub-state","cljs.core/last","timing","cljs.core.mapv","epoch-traces","cljs.core.into","cljs.core.comp","day8.re-frame-10x.utils.utils/id-between-xf","start-of-epoch","event-handler-trace","day8.re-frame-10x.metamorphic/event-handler?","dofx-trace","day8.re-frame-10x.metamorphic/event-dofx?","event-trace","day8.re-frame-10x.metamorphic/event-run?","finish-run","day8.re-frame-10x.metamorphic/finish-run?","day8.re-frame-10x.metamorphic/elapsed-time","sub-match","t","quiescent?","day8.re-frame-10x.metamorphic/quiescent?","all-matches","retained-matches","cljs.core/take-last","first-id-to-retain","retained-traces","p1__39794#","cljs.core.drop_while","day8.re-frame-10x.metamorphic/low-level-reagent-trace?","day8.re-frame-10x.metamorphic/low-level-re-frame-trace?","current-index","current-id","cljs.core.juxt","cljs.core/identity","G__39808","p__39809","map__39810","temp__5737__auto__","match-ids","match-array-index","day8.re-frame-10x.utils.utils/find-index-in-vec","x","cljs.core/count","G__39814","p__39815","map__39817","G__39821","p__39823","map__39824","G__39828","current-epoch-id","app-db-before","day8.re-frame-10x.metamorphic/app-db-before","G__39829","event-to-replay","re-frame.core/dispatch","re-frame.trace/reset-tracing!","G__39831","p__39833","vec__39835","ignore?","G__39838","p__39839","vec__39841","G__39845","p__39846","vec__39847","G__39851","p__39857","vec__39858","code-open?","open?-path","G__39869","p__39870","vec__39871","form","new-form","G__39874","p__39875","vec__39876","G__39880","p__39881","vec__39882","_show-all-code?","new-show-all-code?","G__39885","p__39886","vec__39887","current-state","new-state","G__39890","p__39891","vec__39892","component","new-direction"],"sourcesContent":["(ns day8.re-frame-10x.events\n  (:require [mranderson048.re-frame.v0v10v6.re-frame.core :as rf]\n            [mranderson048.reagent.v0v8v0.reagent.core :as r]\n            [cljs.tools.reader.edn]\n            [day8.re-frame-10x.utils.utils :as utils :refer [spy]]\n            [day8.re-frame-10x.utils.localstorage :as localstorage]\n            [reagent.impl.batching :as batching]\n            [clojure.string :as str]\n            [goog.object]\n            [goog.string]\n            [re-frame.db]\n            [re-frame.interop]\n            [re-frame.core]\n            [re-frame.trace]\n            [day8.re-frame-10x.view.container :as container]\n            [day8.re-frame-10x.styles :as styles]\n            [clojure.set :as set]\n            [day8.re-frame-10x.metamorphic :as metam]))\n\n(defn fixed-after\n  ;; Waiting on https://github.com/Day8/re-frame/issues/447\n  [f]\n  (rf/->interceptor\n    :id :after\n    :after (fn after-after\n             [context]\n             (let [db    (if (contains? (:effects context) :db)\n                           (get-in context [:effects :db])\n                           (get-in context [:coeffects :db]))\n                   event (get-in context [:coeffects :event])]\n               (f db event)                                 ;; call f for side effects\n               context))))                                  ;; context is unchanged\n\n(defn log-trace? [trace]\n  (let [render-operation? (or (= (:op-type trace) :render)\n                              (= (:op-type trace) :componentWillUnmount))\n        component-path    (get-in trace [:tags :component-path] \"\")]\n    (if-not render-operation?\n      true\n      (not (str/includes? component-path \"devtools outer\")))))\n\n(defn disable-tracing! []\n  (re-frame.trace/remove-trace-cb ::cb))\n\n(defn enable-tracing! []\n  (re-frame.trace/register-trace-cb ::cb #(rf/dispatch [:epochs/receive-new-traces %])))\n\n(defn dissoc-in\n  \"Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.\"\n  [m [k & ks :as keys]]\n  (if ks\n    (if-let [nextmap (clojure.core/get m k)]\n      (let [newmap (dissoc-in nextmap ks)]\n        (if (seq newmap)\n          (assoc m k newmap)\n          (dissoc m k)))\n      m)\n    (dissoc m k)))\n\n(defn read-string-maybe [s]\n  (try (cljs.tools.reader.edn/read-string s)\n       (catch :default e\n         nil)))\n\n(rf/reg-event-db\n  :settings/panel-width%\n  (fn [db [_ width%]]\n    (localstorage/save! \"panel-width-ratio\" (max width% 0.05))\n    (assoc-in db [:settings :panel-width%] (max width% 0.05))))\n\n(rf/reg-event-db\n  :settings/window-width\n  (fn [db [_ width]]\n    (assoc-in db [:settings :window-width] width)))\n\n(rf/reg-event-db\n  :settings/selected-tab\n  (fn [db [_ selected-tab]]\n    (localstorage/save! \"selected-tab\" selected-tab)\n    (assoc-in db [:settings :selected-tab] selected-tab)))\n\n(rf/reg-event-db\n  :settings/toggle-settings\n  (fn [db _]\n    (update-in db [:settings :showing-settings?] not)))\n\n(rf/reg-event-db\n  :settings/show-panel?\n  (fn [db [_ show-panel?]]\n    (localstorage/save! \"show-panel\" show-panel?)\n    (assoc-in db [:settings :show-panel?] show-panel?)))\n\n(rf/reg-event-db\n  :settings/factory-reset\n  (fn [db _]\n    (localstorage/delete-all-keys!)\n    (js/location.reload)\n    db))\n\n(rf/reg-event-db\n  :settings/user-toggle-panel\n  (fn [db _]\n    (let [now-showing?    (not (get-in db [:settings :show-panel?]))\n          external-panel? (get-in db [:settings :external-window?])\n          using-trace?    (or external-panel? now-showing?)]\n      (if now-showing?\n        (enable-tracing!)\n        (when-not external-panel?\n          (disable-tracing!)))\n      (localstorage/save! \"using-trace?\" using-trace?)\n      (localstorage/save! \"show-panel\" now-showing?)\n      (-> db\n          (assoc-in [:settings :using-trace?] using-trace?)\n          (assoc-in [:settings :show-panel?] now-showing?)))))\n\n(rf/reg-event-db\n  :settings/set-number-of-retained-epochs\n  (fn [db [_ num-str]]\n    ;; TODO: this is not perfect, there is an issue in re-com\n    ;; where it won't update its model if it never receives another\n    ;; changes after it's on-change is fired.\n    ;; TODO: you could reset the stored epochs on change here\n    ;; once the way they are processed is refactored.\n    (let [num (js/parseInt num-str)\n          num (if (and (not (js/isNaN num)) (pos-int? num))\n                num\n                5)]\n      (localstorage/save! \"retained-epochs\" num)\n      (assoc-in db [:settings :number-of-epochs] num))))\n\n(def ignored-event-mw\n  [(rf/path [:settings :ignored-events]) (fixed-after #(localstorage/save! \"ignored-events\" %))])\n\n(rf/reg-event-db\n  :settings/add-ignored-event\n  ignored-event-mw\n  (fn [ignored-events _]\n    (let [id (random-uuid)]\n      (assoc ignored-events id {:id id :event-str \"\" :event-id nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n  :settings/remove-ignored-event\n  ignored-event-mw\n  (fn [ignored-events [_ id]]\n    (dissoc ignored-events id)))\n\n(rf/reg-event-db\n  :settings/update-ignored-event\n  ignored-event-mw\n  (fn [ignored-events [_ id event-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n    (let [event (read-string-maybe event-str)]\n      (-> ignored-events\n          (assoc-in [id :event-str] event-str)\n          (update-in [id :event-id] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n  :settings/set-ignored-events\n  ignored-event-mw\n  (fn [_ [_ ignored-events]]\n    ignored-events))\n\n(def filtered-view-trace-mw\n  [(rf/path [:settings :filtered-view-trace]) (fixed-after #(localstorage/save! \"filtered-view-trace\" %))])\n\n(rf/reg-event-db\n  :settings/add-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace _]\n    (let [id (random-uuid)]\n      (assoc filtered-view-trace id {:id id :ns-str \"\" :ns nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n  :settings/remove-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace [_ id]]\n    (dissoc filtered-view-trace id)))\n\n(rf/reg-event-db\n  :settings/update-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace [_ id ns-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n    (let [event (read-string-maybe ns-str)]\n      (-> filtered-view-trace\n          (assoc-in [id :ns-str] ns-str)\n          (update-in [id :ns] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n  :settings/set-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [_ [_ ignored-events]]\n    ignored-events))\n\n(def low-level-trace-mw [(rf/path [:settings :low-level-trace]) (fixed-after #(localstorage/save! \"low-level-trace\" %))])\n\n(rf/reg-event-db\n  :settings/set-low-level-trace\n  low-level-trace-mw\n  (fn [_ [_ low-level]]\n    low-level))\n\n(rf/reg-event-db\n  :settings/low-level-trace\n  low-level-trace-mw\n  (fn [low-level [_ trace-type capture?]]\n    (assoc low-level trace-type capture?)))\n\n(rf/reg-event-db\n  :settings/debug?\n  (fn [db [_ debug?]]\n    (assoc-in db [:settings :debug?] debug?)))\n\n(rf/reg-event-db\n  :settings/app-db-follows-events?\n  [(rf/path [:settings :app-db-follows-events?]) (fixed-after #(localstorage/save! \"app-db-follows-events?\" %))]\n  (fn [db [_ follows-events?]]\n    follows-events?))\n\n;; Global\n\n(defn mount [popup-window popup-document]\n  ;; When programming here, we need to be careful about which document and window\n  ;; we are operating on, and keep in mind that the window can close without going\n  ;; through standard react lifecycle, so we hook the beforeunload event.\n  (let [app                      (.getElementById popup-document \"--re-frame-10x--\")\n        resize-update-scheduled? (atom false)\n        handle-window-resize     (fn [e]\n                                   (when-not @resize-update-scheduled?\n                                     (batching/next-tick\n                                       (fn []\n                                         (let [width  (.-innerWidth popup-window)\n                                               height (.-innerHeight popup-window)]\n                                           (rf/dispatch [:settings/external-window-resize {:width width :height height}]))\n                                         (reset! resize-update-scheduled? false)))\n                                     (reset! resize-update-scheduled? true)))\n        handle-window-position   (let [pos (atom {})]\n                                   (fn []\n                                     ;; Only update re-frame if the windows position has changed.\n                                     (let [{:keys [left top]} @pos\n                                           screen-left (.-screenX popup-window)\n                                           screen-top  (.-screenY popup-window)]\n                                       (when (or (not= left screen-left)\n                                                 (not= top screen-top))\n                                         (rf/dispatch [:settings/external-window-position {:left screen-left :top screen-top}])\n                                         (reset! pos {:left screen-left :top screen-top})))))\n        window-position-interval (atom nil)\n        unmount                  (fn [_]\n                                   (.removeEventListener popup-window \"resize\" handle-window-resize)\n                                   (some-> @window-position-interval js/clearInterval)\n                                   nil)]\n\n\n    (styles/inject-trace-styles popup-document)\n    (goog.object/set popup-window \"onunload\" #(rf/dispatch [:global/external-closed]))\n    (r/render\n      [(r/create-class\n         {:display-name           \"devtools outer external\"\n          :component-did-mount    (fn []\n                                    (.addEventListener popup-window \"resize\" handle-window-resize)\n                                    (.addEventListener popup-window \"beforeunload\" unmount)\n                                    ;; Check the window position every 10 seconds\n                                    (reset! window-position-interval\n                                            (js/setInterval\n                                              handle-window-position\n                                              2000)))\n          :component-will-unmount unmount\n          :reagent-render         (fn [] [container/devtools-inner {:panel-type :popup}])})]\n      app)))\n\n(defn open-debugger-window\n  \"Originally copied from re-frisk.devtool/open-debugger-window\"\n  [{:keys [width height top left] :as dimensions}]\n  (let [doc-title        js/document.title\n        new-window-title (goog.string/escapeString (str \"re-frame-10x | \" doc-title))\n        new-window-html  (str \"<head><title>\"\n                              new-window-title\n                              \"</title></head><body style=\\\"margin: 0px;\\\"><div id=\\\"--re-frame-10x--\\\" class=\\\"external-window\\\"></div></body>\")\n        ;; We would like to set the windows left and top positions to match the monitor that it was on previously, but Chrome doesn't give us\n        ;; control over this, it will only position it within the same display that it was popped out on.\n        w                (js/window.open \"about:blank\" \"re-frame-10x-popout\"\n                                         (str \"width=\" width \",height=\" height \",left=\" left \",top=\" top\n                                              \",resizable=yes,scrollbars=yes,status=no,directories=no,toolbar=no,menubar=no\"))\n\n        d                (.-document w)]\n    (when-let [el (.getElementById d \"--re-frame-10x--\")]\n      (r/unmount-component-at-node el))\n    (.open d)\n    (.write d new-window-html)\n    (goog.object/set w \"onload\" #(mount w d))\n    (.close d)))\n\n(rf/reg-event-fx\n  :global/launch-external\n  (fn [ctx _]\n    (open-debugger-window (get-in ctx [:db :settings :external-window-dimensions]))\n    (localstorage/save! \"external-window?\" true)\n    {:db             (assoc-in (:db ctx) [:settings :external-window?] true)\n     ;; TODO: capture the intent that the user is still interacting with devtools, to persist between reloads.\n     :dispatch-later [{:ms 200 :dispatch [:settings/show-panel? false]}]}))\n\n(rf/reg-event-fx\n  :global/external-closed\n  (fn [ctx _]\n    (localstorage/save! \"external-window?\" false)\n    {:db             (assoc-in (:db ctx) [:settings :external-window?] false)\n     :dispatch-later [{:ms 400 :dispatch [:settings/show-panel? true]}]}))\n\n(rf/reg-event-db\n  :settings/external-window-dimensions\n  [(rf/path [:settings :external-window-dimensions]) (rf/after #(localstorage/save! \"external-window-dimensions\" %))]\n  (fn [dim [_ new-dim]]\n    new-dim))\n\n(rf/reg-event-db\n  :settings/external-window-resize\n  [(rf/path [:settings :external-window-dimensions]) (rf/after #(localstorage/save! \"external-window-dimensions\" %))]\n  (fn [dim [_ {width :width height :height}]]\n    (assoc dim :width width :height height)))\n\n(rf/reg-event-db\n  :settings/external-window-position\n  [(rf/path [:settings :external-window-dimensions]) (rf/after #(localstorage/save! \"external-window-dimensions\" %))]\n  (fn [dim [_ {left :left top :top}]]\n    (assoc dim :left left :top top)))\n\n(rf/reg-event-fx\n  :global/enable-tracing\n  (fn [ctx _]\n    (enable-tracing!)\n    nil))\n\n(rf/reg-event-fx\n  :global/disable-tracing\n  (fn [ctx _]\n    (disable-tracing!)\n    nil))\n\n(rf/reg-event-fx\n  :global/add-unload-hook\n  (fn [_ _]\n    (js/window.addEventListener \"beforeunload\" #(rf/dispatch-sync [:global/unloading? true]))\n    nil))\n\n(rf/reg-event-db\n  :global/unloading?\n  (fn [db [_ unloading?]]\n    (assoc-in db [:global :unloading?] unloading?)))\n\n;; Traces\n\n(defn save-filter-items [filter-items]\n  (localstorage/save! \"filter-items\" filter-items))\n\n(rf/reg-event-db\n  :traces/filter-items\n  (fn [db [_ filter-items]]\n    (save-filter-items filter-items)\n    (assoc-in db [:traces :filter-items] filter-items)))\n\n(rf/reg-event-db\n  :traces/add-filter\n  [(rf/path [:traces :filter-items])]\n  (fn [filter-items [_ filter-input filter-type]]\n    (let [new-db (when-not (some #(= filter-input (:query %)) filter-items) ;; prevent duplicate filter strings\n                   ;; if existing, remove prior filter for :slower-than\n                   ;; TODO: rework how time filters are used.\n                   (let [filter-items (if (and (= :slower-than filter-type)\n                                               (some #(= filter-type (:filter-type %)) filter-items))\n                                        (remove #(= :slower-than (:filter-type %)) filter-items)\n                                        filter-items)]\n                     ;; add new filter\n                     (conj filter-items {:id          (random-uuid)\n                                         :query       (if (= filter-type :contains)\n                                                        (str/lower-case filter-input)\n                                                        (js/parseFloat filter-input))\n                                         :filter-type filter-type})))]\n      (save-filter-items new-db)\n      new-db)))\n\n(rf/reg-event-db\n  :traces/remove-filter\n  [(rf/path [:traces :filter-items])]\n  (fn [filter-items [_ filter-id]]\n    (let [new-db (remove #(= (:id %) filter-id) filter-items)]\n      (save-filter-items new-db)\n      new-db)))\n\n(rf/reg-event-db\n  :traces/reset-filter-items\n  (fn [db _]\n    (let [new-db (dissoc-in db [:traces :filter-items])]\n      (save-filter-items (get-in new-db [:traces :filter-items]))\n      new-db)))\n\n(rf/reg-event-db\n  :traces/toggle-all-expansions\n  [(rf/path [:traces :expansions])]\n  (fn [trace-detail-expansions _]\n    (-> trace-detail-expansions\n        (assoc :overrides {})\n        (update :show-all? not))))\n\n(rf/reg-event-db\n  :traces/toggle-trace\n  [(rf/path [:traces :expansions])]\n  (fn [expansions [_ id]]\n    (let [showing? (get-in expansions [:overrides id] (:show-all? expansions))]\n      (update-in expansions [:overrides id] #(if showing? false (not %))))))\n\n(rf/reg-event-db\n  :traces/toggle-categories\n  [(rf/path [:traces :categories])]\n  (fn [categories [_ new-categories]]\n    (let [new-categories (if (set/superset? categories new-categories)\n                           (set/difference categories new-categories)\n                           (set/union categories new-categories))]\n      (localstorage/save! \"categories\" new-categories)\n      new-categories)))\n\n(rf/reg-event-db\n  :traces/set-categories\n  [(rf/path [:traces :categories])]\n  (fn [categories [_ new-categories]]\n    new-categories))\n\n\n(rf/reg-event-db\n  :trace-panel/update-show-epoch-traces?\n  [(rf/path [:trace-panel :show-epoch-traces?]) (fixed-after #(localstorage/save! \"show-epoch-traces?\" %))]\n  (fn [_ [k show-epoch-traces?]]\n    show-epoch-traces?))\n\n;; App DB\n\n(def app-db-path-mw\n  [(rf/path [:app-db :paths]) (fixed-after #(localstorage/save! \"app-db-paths\" %))])\n\n(rf/reg-event-db\n  :app-db/create-path\n  app-db-path-mw\n  (fn [paths _]\n\n    (assoc paths (js/Date.now) {:diff? false :open? true :path nil :path-str \"\" :valid-path? true})))\n\n\n\n;; The core idea with :app-db/update-path and :app-db/update-path-blur\n;; is that we need to separate the users text input (`path-str`) with the\n;; parsing of that string (`path`). We let the user type any string that\n;; they like, and check it for validity on each change. If it is valid\n;; then we update `path` and mark the pod as valid. If it isn't valid then\n;; we don't update `path` and mark the pod as invalid.\n;;\n;; On blur of the input, we reset path-str to the last valid path, if\n;; the pod isn't currently valid.\n\n(rf/reg-event-db\n  :app-db/update-path\n  app-db-path-mw\n  (fn [paths [_ path-id path-str]]\n    (let [path  (read-string-maybe path-str)\n          paths (assoc-in paths [path-id :path-str] path-str)]\n      (if (or (and (some? path)\n                   (sequential? path))\n              (str/blank? path-str))\n        (-> paths\n            (assoc-in [path-id :path] path)\n            (assoc-in [path-id :valid-path?] true))\n        (assoc-in paths [path-id :valid-path?] false)))))\n\n(rf/reg-event-db\n  :app-db/update-path-blur\n  app-db-path-mw\n  (fn [paths [_ path-id]]\n    (let [{:keys [valid-path? path]} (get paths path-id)]\n      (if valid-path?\n        paths\n        (-> (assoc-in paths [path-id :path-str] (pr-str path))\n            (assoc-in [path-id :valid-path?] true))))))\n\n(rf/reg-event-db\n  :app-db/set-path-visibility\n  app-db-path-mw\n  (fn [paths [_ path-id open?]]\n    (assoc-in paths [path-id :open?] open?)))\n\n(rf/reg-event-db\n  :app-db/set-diff-visibility\n  app-db-path-mw\n  (fn [paths [_ path-id diff?]]\n    (let [open? (if diff?\n                  true\n                  (get-in paths [path-id :open?]))]\n      (-> paths\n          (assoc-in [path-id :diff?] diff?)\n          ;; If we turn on diffing then we want to also expand the path\n          (assoc-in [path-id :open?] open?)))))\n\n(rf/reg-event-db\n  :app-db/remove-path\n  app-db-path-mw\n  (fn [paths [_ path-id]]\n    (dissoc paths path-id)))\n\n(rf/reg-event-db\n  :app-db/paths\n  app-db-path-mw\n  (fn [db [_ paths]]\n    paths))\n\n#_(rf/reg-event-db\n    :app-db/remove-path\n    (fn [db [_ path]]\n      (let [new-db (update-in db [:app-db :paths] #(remove (fn [p] (= p path)) %))]\n        (localstorage/save! \"app-db-paths\" (get-in new-db [:app-db :paths]))\n        ;; TODO: remove from json-ml expansions too.\n        new-db)))\n\n#_(rf/reg-event-db\n    :app-db/add-path\n    (fn [db _]\n      (let [search-string (get-in db [:app-db :search-string])\n            path          (try\n                            (when-not (str/blank? search-string)\n                              (cljs.reader/read-string (str \"[\" search-string \"]\")))\n                            (catch :default e\n                              nil))]\n        (if (some? path)\n          (do (localstorage/save! \"app-db-paths\" (cons path (get-in db [:app-db :paths])))\n              (rf/dispatch [:app-db/toggle-expansion [path]])\n              (-> db\n                  (update-in [:app-db :paths] #(cons path %))\n                  (assoc-in [:app-db :search-string] \"\")))\n          db))))\n\n(rf/reg-event-db\n  :app-db/search-string\n  (fn [db [_ search-string]]\n    (assoc-in db [:app-db :search-string] search-string)))\n\n(rf/reg-event-db\n  :app-db/set-json-ml-paths\n  [(rf/path [:app-db :json-ml-expansions])]\n  (fn [db [_ paths]]\n    (localstorage/save! \"app-db-json-ml-expansions\" paths)\n    paths))\n\n(rf/reg-event-db\n  :app-db/toggle-expansion\n  [(rf/path [:app-db :json-ml-expansions])]\n  (fn [paths [_ path]]\n    (let [new-paths (if (contains? paths path)\n                      (disj paths path)\n                      (conj paths path))]\n      (localstorage/save! \"app-db-json-ml-expansions\" new-paths)\n      new-paths)))\n\n(rf/reg-event-db\n  :app-db/reagent-id\n  [(rf/path [:app-db :reagent-id])]\n  (fn [paths _]\n    (re-frame.interop/reagent-id re-frame.db/app-db)))\n\n(rf/reg-event-db\n  :snapshot/reset-current-epoch-app-db\n  (fn [db [_ new-id]]\n    (when (get-in db [:settings :app-db-follows-events?])\n      (let [epochs   (:epochs db)\n            match-id (or new-id\n                         ;; new-id may be nil when we call this event from :settings/play\n                         (utils/last-in-vec (get epochs :match-ids)))\n            match    (get-in epochs [:matches-by-id match-id])\n            event    (metam/matched-event (:match-info match))]\n        ;; Don't mess up the users app if there is a problem getting app-db-after.\n        (when-some [new-db (metam/app-db-after event)]\n          (reset! re-frame.db/app-db new-db))))\n    db))\n\n;;;\n\n(defn first-match-id\n  [m]\n  (-> m :match-info first :id))\n\n(rf/reg-event-fx\n  :epochs/receive-new-traces\n  (fn [{:keys [db]} [_ new-traces]]\n    (if-let [filtered-traces (->> (filter log-trace? new-traces)\n                                  (sort-by :id))]\n      (let [number-of-epochs-to-retain (get-in db [:settings :number-of-epochs])\n            events-to-ignore           (->> (get-in db [:settings :ignored-events]) vals (map :event-id) set)\n            previous-traces            (get-in db [:traces :all-traces] [])\n            parse-state                (get-in db [:epochs :parse-state] metam/initial-parse-state)\n            {drop-re-frame :re-frame drop-reagent :reagent} (get-in db [:settings :low-level-trace])\n            all-traces                 (reduce conj previous-traces filtered-traces)\n            parse-state                (metam/parse-traces parse-state filtered-traces)\n            ;; TODO:!!!!!!!!!!!!! We should be parsing everything else with the traces that span the newly matched\n            ;; epochs, not the filtered-traces, as these are only partial.\n            new-matches                (:partitions parse-state)\n            previous-matches           (get-in db [:epochs :matches] [])\n            parse-state                (assoc parse-state :partitions []) ;; Remove matches we know about\n            new-matches                (remove (fn [match]\n                                                 (let [event (get-in (metam/matched-event match) [:tags :event])]\n                                                   (contains? events-to-ignore (first event)))) new-matches)\n            ;; subscription-info is calculated separately from subscription-match-state because they serve different purposes:\n            ;; - subscription-info collects all the data that we know about the subscription itself, like its layer, inputs and other\n            ;;   things that are defined as part of the reg-sub.\n            ;; - subscription-match-state collects all the data that we know about the state of specific instances of subscriptions\n            ;;   like its reagent id, when it was created, run, disposed, what values it returned, e.t.c.\n            subscription-info          (metam/subscription-info (get-in db [:epochs :subscription-info] {}) filtered-traces (get-in db [:app-db :reagent-id]))\n            sub-state                  (get-in db [:epochs :sub-state] metam/initial-sub-state)\n            subscription-match-state   (metam/subscription-match-state sub-state all-traces new-matches)\n            subscription-matches       (rest subscription-match-state)\n\n            new-sub-state              (last subscription-match-state)\n            timing                     (mapv (fn [match]\n                                               (let [epoch-traces        (into []\n                                                                               (comp\n                                                                                 (utils/id-between-xf (:id (first match)) (:id (last match))))\n                                                                               all-traces)\n                                                     ;; TODO: handle case when there are no epoch-traces\n                                                     start-of-epoch      (nth epoch-traces 0)\n                                                     ;; TODO: optimise trace searching\n                                                     event-handler-trace (first (filter metam/event-handler? epoch-traces))\n                                                     dofx-trace          (first (filter metam/event-dofx? epoch-traces))\n                                                     event-trace         (first (filter metam/event-run? epoch-traces))\n                                                     finish-run          (or (first (filter metam/finish-run? epoch-traces))\n                                                                             (utils/last-in-vec epoch-traces))]\n                                                 {:re-frame/event-run-time     (metam/elapsed-time start-of-epoch finish-run)\n                                                  :re-frame/event-time         (:duration event-trace)\n                                                  :re-frame/event-handler-time (:duration event-handler-trace)\n                                                  :re-frame/event-dofx-time    (:duration dofx-trace)}))\n                                             new-matches)\n\n            new-matches                (map (fn [match sub-match t] {:match-info match\n                                                                     :sub-state  sub-match\n                                                                     :timing     t})\n                                            new-matches subscription-matches timing)\n            ;; If there are new matches found, then by definition, a quiescent trace must have been received\n            ;; However in cases where we reset the db in a replay, we won't get an event match.\n            ;; We short circuit here to avoid iterating over the traces when it's unnecessary.\n            quiescent?                 (or (seq new-matches)\n                                           (filter metam/quiescent? filtered-traces))\n            all-matches                (reduce conj previous-matches new-matches)\n            retained-matches           (into [] (take-last number-of-epochs-to-retain all-matches))\n            first-id-to-retain         (first-match-id (first retained-matches))\n            retained-traces            (into [] (comp (drop-while #(< (:id %) first-id-to-retain))\n                                                      (remove (fn [trace]\n                                                                (or (when drop-reagent (metam/low-level-reagent-trace? trace))\n                                                                    (when drop-re-frame (metam/low-level-re-frame-trace? trace)))))) all-traces)]\n        {:db       (-> db\n                       (assoc-in [:traces :all-traces] retained-traces)\n                       (update :epochs (fn [epochs]\n                                         (let [current-index (:current-epoch-index epochs)\n                                               current-id    (:current-epoch-id epochs)]\n                                           (assoc epochs\n                                             :matches retained-matches\n                                             :matches-by-id (into {} (map (juxt first-match-id identity)) retained-matches)\n                                             :match-ids (mapv first-match-id retained-matches)\n                                             :parse-state parse-state\n                                             :sub-state new-sub-state\n                                             :subscription-info subscription-info\n                                             ;; Reset current epoch to the head of the list if we got a new event in.\n                                             :current-epoch-id (if (seq new-matches) nil current-id)\n                                             :current-epoch-index (if (seq new-matches) nil current-index))))))\n         :dispatch (when quiescent? [:epochs/quiescent])})\n      ;; Else\n      {:db db})))\n\n;; TODO: this code is a bit messy, needs refactoring and cleaning up.\n(rf/reg-event-fx\n  :epochs/previous-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    (if-some [current-id (:current-epoch-id db)]\n      (let [match-ids         (:match-ids db)\n            match-array-index (utils/find-index-in-vec (fn [x] (= current-id x)) match-ids)\n            new-id            (nth match-ids (dec match-array-index))]\n        {:db       (assoc db :current-epoch-id new-id)\n         :dispatch [:snapshot/reset-current-epoch-app-db new-id]})\n      (let [new-id (nth (:match-ids db)\n                        (- (count (:match-ids db)) 2))]\n        {:db       (assoc db :current-epoch-id new-id)\n         :dispatch [:snapshot/reset-current-epoch-app-db new-id]}))))\n\n(rf/reg-event-fx\n  :epochs/next-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    (if-some [current-id (:current-epoch-id db)]\n      (let [match-ids         (:match-ids db)\n            match-array-index (utils/find-index-in-vec (fn [x] (= current-id x)) match-ids)\n            new-id            (nth match-ids (inc match-array-index))]\n        {:db         (assoc db :current-epoch-id new-id)\n         :dispatch   [:snapshot/reset-current-epoch-app-db new-id]})\n      (let [new-id (utils/last-in-vec (:match-ids db))]\n        {:db         (assoc db :current-epoch-id new-id)\n         :dispatch   [:snapshot/reset-current-epoch-app-db new-id]}))))\n\n(rf/reg-event-fx\n  :epochs/most-recent-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    {:db (assoc db :current-epoch-index nil\n                   :current-epoch-id nil)\n     :dispatch [:snapshot/reset-current-epoch-app-db (utils/last-in-vec (:match-ids db))]}))\n\n(rf/reg-event-db\n  :epochs/replay\n  [(rf/path [:epochs])]\n  (fn [epochs _]\n    (let [current-epoch-id (or (get epochs :current-epoch-id)\n                               (utils/last-in-vec (get epochs :match-ids)))\n          event-trace      (-> (get-in epochs [:matches-by-id current-epoch-id :match-info])\n                               (metam/matched-event))\n          app-db-before    (metam/app-db-before event-trace)\n          event            (get-in event-trace [:tags :event])]\n      (reset! re-frame.db/app-db app-db-before)\n      ;; Wait for quiescence\n      (assoc epochs :replay event))))\n\n(rf/reg-event-db\n  :epochs/quiescent\n  [(rf/path [:epochs])]\n  (fn [db _]\n    (if-some [event-to-replay (:replay db)]\n      (do (re-frame.core/dispatch event-to-replay)\n          (dissoc db :replay))\n      db)))\n\n(rf/reg-event-db\n  :epochs/reset\n  (fn [db]\n    (re-frame.trace/reset-tracing!)\n    (dissoc db :epochs :traces)))\n\n;;\n\n(rf/reg-event-db\n  :subs/ignore-unchanged-l2-subs?\n  [(rf/path [:subs :ignore-unchanged-subs?])]\n  (fn [_ [_ ignore?]]\n    ignore?))\n\n(rf/reg-event-db\n  :subs/open-pod?\n  [(rf/path [:subs :expansions])]\n  (fn [expansions [_ id open?]]\n    (assoc-in expansions [id :open?] open?)))\n\n(rf/reg-event-db\n  :subs/set-diff-visibility\n  [(rf/path [:subs :expansions])]\n  (fn [expansions [_ id diff?]]\n    (let [open? (if diff?\n                  true\n                  (get-in expansions [id :open?]))]\n      (-> expansions\n          (assoc-in [id :diff?] diff?)\n          ;; If we turn on diffing then we want to also expand the path\n          (assoc-in [id :open?] open?)))))\n\n;;\n\n(rf/reg-event-db\n  :code/set-code-visibility\n  [(rf/path [:code :code-open?])]\n  (fn [code-open? [_ open?-path open?]]\n    (assoc-in code-open? open?-path open?)))\n\n(rf/reg-event-db\n  :code/hover-form\n  [(rf/path [:code :highlighted-form])]\n  (fn [form [_ new-form]]\n    new-form))\n\n(rf/reg-event-db\n  :code/exit-hover-form\n  [(rf/path [:code :highlighted-form])]\n  (fn [form [_ new-form]]\n    (if (= form new-form)\n      nil\n      new-form)))\n\n(rf/reg-event-db\n  :code/set-show-all-code?\n  [(rf/path [:code :show-all-code?])]\n  (fn [_show-all-code? [_ new-show-all-code?]]\n    new-show-all-code?))\n\n(rf/reg-event-db\n  :code/repl-msg-state\n  [(rf/path [:code :repl-msg-state])]\n  (fn [current-state [_ new-state]]\n    (if (and (= current-state :running) (= new-state :start)) ;; Toggles between :running and :re-running to guarantee rerenderig when you continuously call this event\n      :re-running\n      (if (= new-state :start) :running :end))))\n\n;;\n\n(rf/reg-event-db\n  :component/set-direction\n  [(rf/path [:component])]\n  (fn [component [_ new-direction]]\n    (assoc component :direction new-direction)))\n"]}