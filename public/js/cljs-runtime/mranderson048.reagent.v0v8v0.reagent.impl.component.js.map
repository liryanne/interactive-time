{"version":3,"sources":["mranderson048/reagent/v0v8v0/reagent/impl/component.cljs"],"mappings":"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","names":["mranderson048.reagent.v0v8v0.reagent.impl.component/shallow-obj-to-map","o","ks","cljs.core/js-keys","len","m","i","k","cljs.core.assoc","cljs.core.keyword","mranderson048.reagent.v0v8v0.reagent.impl.component/extract-props","v","p","cljs.core.nth","cljs.core/map?","mranderson048.reagent.v0v8v0.reagent.impl.component/extract-children","first-child","cljs.core/count","cljs.core.subvec","mranderson048.reagent.v0v8v0.reagent.impl.component/props-argv","c","temp__5737__auto__","a","mranderson048.reagent.v0v8v0.reagent.impl.component/get-argv","mranderson048.reagent.v0v8v0.reagent.impl.component/get-props","mranderson048.reagent.v0v8v0.reagent.impl.component/get-children","js/module$node_modules$react$index.Children.toArray","cljs.core.into","mranderson048.reagent.v0v8v0.reagent.impl.component/reagent-class?","cljs.core/fn?","G__32666","mranderson048.reagent.v0v8v0.reagent.impl.component/react-class?","G__32672","mranderson048.reagent.v0v8v0.reagent.impl.component/reagent-component?","mranderson048.reagent.v0v8v0.reagent.impl.component/cached-react-class","mranderson048.reagent.v0v8v0.reagent.impl.component/cache-react-class","constructor","mranderson048.reagent.v0v8v0.reagent.impl.component/state-atom","this","sa","mranderson048.reagent.v0v8v0.reagent.ratom.atom","js/mranderson048","js/mranderson048.reagent","js/mranderson048.reagent.v0v8v0","js/mranderson048.reagent.v0v8v0.reagent","js/mranderson048.reagent.v0v8v0.reagent.impl","js/mranderson048.reagent.v0v8v0.reagent.impl.component","js/mranderson048.reagent.v0v8v0.reagent.impl.component.as-element","mranderson048.reagent.v0v8v0.reagent.impl.component/as-element","mranderson048.reagent.v0v8v0.reagent.impl.component/wrap-render","f","_","cljs.core/ifn?","js/Error","cljs.core.pr_str","res","n","G__32683","cljs.core.into_array","cljs.core/vector?","args","G__32686","cljs.core.apply","cljs.core/vector","mranderson048.reagent.v0v8v0.reagent.impl.component/do-render","*current-component*-orig-val__32744","*current-component*-temp-val__32745","mranderson048.reagent.v0v8v0.reagent.impl.component/*current-component*","ok","mranderson048.reagent.v0v8v0.reagent.debug/has-console","mranderson048.reagent.v0v8v0.reagent.debug/tracking","mranderson048.reagent.v0v8v0.reagent.debug/track-console","js/console","mranderson048.reagent.v0v8v0.reagent.impl.component/comp-name","mranderson048.reagent.v0v8v0.reagent.impl.component/rat-opts","mranderson048.reagent.v0v8v0.reagent.impl.component/static-fns","mranderson048.reagent.v0v8v0.reagent.impl.util/*non-reactive*","rat","mranderson048.reagent.v0v8v0.reagent.impl.batching/mark-rendered","mranderson048.reagent.v0v8v0.reagent.ratom/run-in-reaction","mranderson048.reagent.v0v8v0.reagent.impl.batching/queue-render","mranderson048.reagent.v0v8v0.reagent.impl.component/custom-wrapper","key","G__32748","cljs.core/Keyword","cljs.core/reset!","nextprops","nextstate","or__4126__auto__","mranderson048.reagent.v0v8v0.reagent.impl.util/*always-update*","old-argv","new-argv","noargv","cljs.core.not_EQ_","oldprops","mranderson048.reagent.v0v8v0.reagent.impl.batching/next-mount-count","G__32765","mranderson048.reagent.v0v8v0.reagent.ratom/dispose!","error","info","mranderson048.reagent.v0v8v0.reagent.impl.component/get-wrapper","name","wrap","and__4115__auto__","mranderson048.reagent.v0v8v0.reagent.impl.component/obligatory","mranderson048.reagent.v0v8v0.reagent.impl.component/dash-to-camel","mranderson048.reagent.v0v8v0.reagent.impl.util/memoize-1","mranderson048.reagent.v0v8v0.reagent.impl.util/dash-to-camel","mranderson048.reagent.v0v8v0.reagent.impl.component/camelify-map-keys","fun-map","cljs.core/reduce-kv","mranderson048.reagent.v0v8v0.reagent.impl.component/add-obligatory","cljs.core.merge","mranderson048.reagent.v0v8v0.reagent.impl.component/wrap-funs","fmap","renders","cljs.core/select-keys","render-fun","cljs.core/vals","cljs.core/first","legacy-render","mranderson048.reagent.v0v8v0.reagent.impl.util/fun-name","G__32774","cljs.core.gensym","mranderson048.reagent.v0v8v0.reagent.impl.component/map-to-js","G__32775","cljs.core/name","mranderson048.reagent.v0v8v0.reagent.impl.component/cljsify","body","mranderson048.reagent.v0v8v0.reagent.impl.component/create-class","js/module$node_modules$create_react_class$index","mranderson048.reagent.v0v8v0.reagent.impl.component/fiber-component-path","fiber","G__32777","parent","G__32779","path","G__32780","cljs.core/empty?","mranderson048.reagent.v0v8v0.reagent.impl.component/component-path","temp__5733__auto__","G__32782","G__32783","instance","G__32787","G__32789","elem","G__32792","G__32793","G__32794","owner","G__32796","G__32797","G__32798","G__32799","mranderson048.reagent.v0v8v0.reagent.impl.component/fn-to-class","spec","cljs.core/meta","withrender","mranderson048.reagent.v0v8v0.reagent.impl.component/as-class","tag","cached-class","mranderson048.reagent.v0v8v0.reagent.impl.component/reactify-component","comp"],"sourcesContent":["(ns mranderson048.reagent.v0v8v0.reagent.impl.component\n  (:require [create-react-class :as create-react-class]\n            [react :as react]\n            [mranderson048.reagent.v0v8v0.reagent.impl.util :as util]\n            [mranderson048.reagent.v0v8v0.reagent.impl.batching :as batch]\n            [mranderson048.reagent.v0v8v0.reagent.ratom :as ratom]\n            [mranderson048.reagent.v0v8v0.reagent.interop :refer-macros [$ $!]]\n            [mranderson048.reagent.v0v8v0.reagent.debug :refer-macros [dbg prn dev? warn error warn-unless\n                                          assert-callable]]))\n\n(declare ^:dynamic *current-component*)\n\n\n;;; Argv access\n\n(defn shallow-obj-to-map [o]\n  (let [ks (js-keys o)\n        len (alength ks)]\n    (loop [m {} i 0]\n      (if (< i len)\n        (let [k (aget ks i)]\n          (recur (assoc m (keyword k) (aget o k)) (inc i)))\n        m))))\n\n(defn extract-props [v]\n  (let [p (nth v 1 nil)]\n    (if (map? p) p)))\n\n(defn extract-children [v]\n  (let [p (nth v 1 nil)\n        first-child (if (or (nil? p) (map? p)) 2 1)]\n    (if (> (count v) first-child)\n      (subvec v first-child))))\n\n(defn props-argv [c p]\n  (if-some [a ($ p :argv)]\n    a\n    [(.-constructor c) (shallow-obj-to-map p)]))\n\n(defn get-argv [c]\n  (props-argv c ($ c :props)))\n\n(defn get-props [c]\n  (let [p ($ c :props)]\n    (if-some [v ($ p :argv)]\n      (extract-props v)\n      (shallow-obj-to-map p))))\n\n(defn get-children [c]\n  (let [p ($ c :props)]\n    (if-some [v ($ p :argv)]\n      (extract-children v)\n      (->> ($ p :children)\n           (react/Children.toArray)\n           (into [])))))\n\n(defn ^boolean reagent-class? [c]\n  (and (fn? c)\n       (some? (some-> c .-prototype ($ :reagentRender)))))\n\n(defn ^boolean react-class? [c]\n  (and (fn? c)\n       (some? (some-> c .-prototype ($ :render)))))\n\n(defn ^boolean reagent-component? [c]\n  (some? ($ c :reagentRender)))\n\n(defn cached-react-class [c]\n  ($ c :cljsReactClass))\n\n(defn cache-react-class [c constructor]\n  ($! c :cljsReactClass constructor))\n\n\n;;; State\n\n(defn state-atom [this]\n  (let [sa ($ this :cljsState)]\n    (if-not (nil? sa)\n      sa\n      ($! this :cljsState (ratom/atom nil)))))\n\n;; avoid circular dependency: this gets set from template.cljs\n(defonce as-element nil)\n\n\n;;; Rendering\n\n(defn wrap-render [c]\n  (let [f ($ c :reagentRender)\n        _ (assert-callable f)\n        res (if (true? ($ c :cljsLegacyRender))\n              (.call f c c)\n              (let [v (get-argv c)\n                    n (count v)]\n                (case n\n                  1 (.call f c)\n                  2 (.call f c (nth v 1))\n                  3 (.call f c (nth v 1) (nth v 2))\n                  4 (.call f c (nth v 1) (nth v 2) (nth v 3))\n                  5 (.call f c (nth v 1) (nth v 2) (nth v 3) (nth v 4))\n                  (.apply f c (.slice (into-array v) 1)))))]\n    (cond\n      (vector? res) (as-element res)\n      (ifn? res) (let [f (if (reagent-class? res)\n                           (fn [& args]\n                             (as-element (apply vector res args)))\n                           res)]\n                   ($! c :reagentRender f)\n                   (recur c))\n      :else res)))\n\n(declare comp-name)\n\n(defn do-render [c]\n  (binding [*current-component* c]\n    (if (dev?)\n      ;; Log errors, without using try/catch (and mess up call stack)\n      (let [ok (array false)]\n        (try\n          (let [res (wrap-render c)]\n            (aset ok 0 true)\n            res)\n          (finally\n            (when-not (aget ok 0)\n              (error (str \"Error rendering component\"\n                          (comp-name)))))))\n      (wrap-render c))))\n\n\n;;; Method wrapping\n\n(def rat-opts {:no-cache true})\n\n(def static-fns\n  {:render\n   (fn render []\n     (this-as c (if util/*non-reactive*\n                  (do-render c)\n                  (let [rat ($ c :cljsRatom)]\n                    (batch/mark-rendered c)\n                    (if (nil? rat)\n                      (ratom/run-in-reaction #(do-render c) c \"cljsRatom\"\n                                             batch/queue-render rat-opts)\n                      (._run rat false))))))})\n\n(defn custom-wrapper [key f]\n  (case key\n    :getDefaultProps\n    (throw (js/Error. \"getDefaultProps not supported\"))\n\n    :getInitialState\n    (fn getInitialState []\n      (this-as c (reset! (state-atom c) (.call f c c))))\n\n    :componentWillReceiveProps\n    (fn componentWillReceiveProps [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    :shouldComponentUpdate\n    (fn shouldComponentUpdate [nextprops nextstate]\n      (or util/*always-update*\n          (this-as c\n                   ;; Don't care about nextstate here, we use forceUpdate\n                   ;; when only when state has changed anyway.\n                   (let [old-argv ($ c :props.argv)\n                         new-argv ($ nextprops :argv)\n                         noargv (or (nil? old-argv) (nil? new-argv))]\n                     (cond\n                       (nil? f) (or noargv (not= old-argv new-argv))\n                       noargv (.call f c c (get-argv c) (props-argv c nextprops))\n                       :else  (.call f c c old-argv new-argv))))))\n\n    :componentWillUpdate\n    (fn componentWillUpdate [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    :componentDidUpdate\n    (fn componentDidUpdate [oldprops]\n      (this-as c (.call f c c (props-argv c oldprops))))\n\n    :componentWillMount\n    (fn componentWillMount []\n      (this-as c\n               ($! c :cljsMountOrder (batch/next-mount-count))\n               (when-not (nil? f)\n                 (.call f c c))))\n\n    :componentDidMount\n    (fn componentDidMount []\n      (this-as c (.call f c c)))\n\n    :componentWillUnmount\n    (fn componentWillUnmount []\n      (this-as c\n               (some-> ($ c :cljsRatom)\n                       ratom/dispose!)\n               (batch/mark-rendered c)\n               (when-not (nil? f)\n                 (.call f c c))))\n\n    :componentDidCatch\n    (fn componentDidCatch [error info]\n      (this-as c (.call f c c error info)))\n\n    nil))\n\n(defn get-wrapper [key f name]\n  (let [wrap (custom-wrapper key f)]\n    (when (and wrap f)\n      (assert-callable f))\n    (or wrap f)))\n\n(def obligatory {:shouldComponentUpdate nil\n                 :componentWillMount nil\n                 :componentWillUnmount nil})\n\n(def dash-to-camel (util/memoize-1 util/dash-to-camel))\n\n(defn camelify-map-keys [fun-map]\n  (reduce-kv (fn [m k v]\n               (assoc m (-> k dash-to-camel keyword) v))\n             {} fun-map))\n\n(defn add-obligatory [fun-map]\n  (merge obligatory fun-map))\n\n(defn wrap-funs [fmap]\n  (when (dev?)\n    (let [renders (select-keys fmap [:render :reagentRender :componentFunction])\n          render-fun (-> renders vals first)]\n      (assert (pos? (count renders)) \"Missing reagent-render\")\n      (assert (== 1 (count renders)) \"Too many render functions supplied\")\n      (assert-callable render-fun)))\n  (let [render-fun (or (:reagentRender fmap)\n                       (:componentFunction fmap))\n        legacy-render (nil? render-fun)\n        render-fun (or render-fun\n                       (:render fmap))\n        name (str (or (:displayName fmap)\n                      (util/fun-name render-fun)))\n        name (case name\n               \"\" (str (gensym \"reagent\"))\n               name)\n        fmap (reduce-kv (fn [m k v]\n                          (assoc m k (get-wrapper k v name)))\n                        {} fmap)]\n    (assoc fmap\n           :displayName name\n           :autobind false\n           :cljsLegacyRender legacy-render\n           :reagentRender render-fun\n           :render (:render static-fns))))\n\n(defn map-to-js [m]\n  (reduce-kv (fn [o k v]\n               (doto o\n                 (aset (name k) v)))\n             #js{} m))\n\n(defn cljsify [body]\n  (-> body\n      camelify-map-keys\n      add-obligatory\n      wrap-funs\n      map-to-js))\n\n(defn create-class [body]\n  {:pre [(map? body)]}\n  (->> body\n       cljsify\n       create-react-class))\n\n(defn fiber-component-path [fiber]\n  (let [name (some-> fiber\n                     ($ :type)\n                     ($ :displayName))\n        parent (some-> fiber\n                       ($ :return))\n        path (some-> parent\n                     fiber-component-path\n                     (str \" > \"))\n        res (str path name)]\n    (when-not (empty? res) res)))\n\n(defn component-path [c]\n  ;; Alternative branch for React 16\n  ;; Try both original name (for UMD foreign-lib) and manged name (property access, for Closure optimized React)\n  (if-let [fiber (or (some-> c ($ :_reactInternalFiber))\n                     (some-> c (.-_reactInternalFiber)))]\n    (fiber-component-path fiber)\n    (let [instance (or (some-> c ($ :_reactInternalInstance))\n                       (some-> c (.-_reactInternalInstance))\n                       c)\n          elem (or (some-> instance ($ :_currentElement))\n                   (some-> instance (.-_currentElement)))\n          name (some-> elem\n                       ($ :type)\n                       ($ :displayName))\n          owner (or (some-> elem ($ :_owner))\n                    (some-> elem (.-_owner)))\n          path (some-> owner\n                       component-path\n                       (str \" > \"))\n          res (str path name)]\n      (when-not (empty? res) res))))\n\n(defn comp-name []\n  (if (dev?)\n    (let [c *current-component*\n          n (or (component-path c)\n                (some-> c .-constructor util/fun-name))]\n      (if-not (empty? n)\n        (str \" (in \" n \")\")\n        \"\"))\n    \"\"))\n\n(defn fn-to-class [f]\n  (assert-callable f)\n  (warn-unless (not (and (react-class? f)\n                         (not (reagent-class? f))))\n               \"Using native React classes directly in Hiccup forms \"\n               \"is not supported. Use create-element or \"\n               \"adapt-react-class instead: \" (let [n (util/fun-name f)]\n                                               (if (empty? n) f n))\n               (comp-name))\n  (if (reagent-class? f)\n    (cache-react-class f f)\n    (let [spec (meta f)\n          withrender (assoc spec :reagent-render f)\n          res (create-class withrender)]\n      (cache-react-class f res))))\n\n(defn as-class [tag]\n  (if-some [cached-class (cached-react-class tag)]\n    cached-class\n    (fn-to-class tag)))\n\n(defn reactify-component [comp]\n  (if (react-class? comp)\n    comp\n    (as-class comp)))\n"]}