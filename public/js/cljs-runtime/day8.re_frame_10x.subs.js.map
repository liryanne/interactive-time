{"version":3,"sources":["day8/re_frame_10x/subs.cljs"],"mappings":"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","names":["G__38509","G__38510","mranderson048.re-frame.v0v10v6.re-frame.core/reg-sub","db","_","cljs.core.get","G__38511","G__38512","G__38513","G__38514","settings","G__38515","G__38516","G__38517","G__38518","p__38519","vec__38520","cljs.core.nth","panel-width%","n","Math/ceil","G__38523","G__38524","G__38525","G__38526","G__38527","G__38528","G__38529","G__38530","p__38531","vec__38533","width","G__38537","G__38538","G__38539","G__38540","G__38541","G__38542","G__38543","G__38544","G__38545","G__38546","G__38547","G__38548","G__38549","G__38550","G__38551","G__38552","cljs.core.sort_by","cljs.core/vals","G__38557","G__38558","G__38559","G__38560","G__38561","G__38562","G__38563","G__38564","G__38565","G__38566","G__38567","G__38568","G__38569","G__38570","G__38571","G__38572","G__38573","G__38574","G__38575","G__38576","G__38577","G__38578","trace","cljs.core.get_in","G__38580","G__38581","G__38582","G__38583","G__38593","G__38594","G__38595","G__38596","app-db-settings","p1__38588#","cljs.core.map","cljs.core.assoc","cljs.core/val","cljs.core/key","G__38601","G__38602","G__38603","G__38604","G__38605","G__38606","G__38607","G__38608","G__38609","G__38610","G__38611","G__38612","p__38613","vec__38614","expansions","path","cljs.core/contains?","G__38617","G__38618","G__38619","G__38620","root","G__38621","G__38622","G__38623","G__38624","G__38625","G__38626","G__38627","G__38628","G__38629","G__38630","G__38631","G__38632","G__38633","G__38634","traces","G__38635","G__38636","G__38637","G__38638","cljs.core/count","G__38639","G__38640","G__38641","G__38642","G__38643","G__38644","G__38645","G__38646","p__38647","vec__38648","beginning","ending","cljs.core.into","day8.re-frame-10x.utils.utils/id-between-xf","p__38651","vec__38652","day8.re-frame-10x.subs/filter-ignored-views","filtered-views","munged-ns","cljs.core.comp","cljs.core/munge","cljs.core/set","cljs.core.remove","day8.re-frame-10x.metamorphic/render?","cljs.core.subs","clojure.string.last_index_of","G__38655","G__38656","G__38657","G__38658","G__38659","G__38660","G__38661","G__38662","G__38663","G__38664","G__38665","G__38666","G__38667","G__38668","G__38669","G__38670","trace-root","G__38671","G__38672","G__38673","G__38674","G__38675","G__38676","G__38677","G__38678","snapshot","G__38679","G__38680","G__38681","G__38682","G__38683","G__38684","G__38685","G__38686","p__38687","vec__38688","epochs","match-ids","current-id","match","cljs.core/last","cljs.core/first","G__38691","G__38692","G__38693","G__38694","match-state","G__38702","G__38703","G__38704","G__38705","day8.re-frame-10x.metamorphic/matched-event","G__38706","G__38707","G__38708","G__38709","G__38710","G__38711","G__38712","G__38713","G__38714","G__38715","G__38716","G__38717","G__38722","G__38723","G__38724","G__38725","G__38729","G__38730","G__38731","G__38732","G__38734","G__38735","G__38736","G__38737","G__38738","G__38739","G__38740","G__38741","G__38742","G__38743","G__38744","G__38745","G__38746","G__38747","p__38750","vec__38751","current","ids","G__38756","G__38757","G__38758","G__38759","G__38760","G__38761","p__38762","vec__38763","day8.re-frame-10x.utils.utils/last-in-vec","G__38767","G__38768","G__38769","G__38770","start-of-epoch","end-of-epoch","day8.re-frame-10x.metamorphic/elapsed-time","G__38776","G__38777","G__38778","G__38779","p1__38775#","cljs.core.filter","day8.re-frame-10x.metamorphic/request-animation-frame?","day8.re-frame-10x.metamorphic/request-animation-frame-end?","G__38780","G__38781","G__38782","G__38783","frame-traces","var_args","G__38793","day8.re-frame-10x.subs/+nil","args-arr__4757__auto__","len__4736__auto__","i__4737__auto__","argseq__4758__auto__","cljs.core/IndexedSeq","seq38789","G__38790","cljs.core/next","G__38791","self__4723__auto__","x","y","more","cljs.core.reduce","cljs.core/+","G__38800","G__38801","G__38802","G__38803","G__38804","G__38805","p__38806","p__38807","vec__38808","vec__38811","af-start-end","epoch-traces","frame-number","vec__38815","frame-pairs","cljs.core.partition","start","end","af-traces","day8.re-frame-10x.metamorphic/id-between-xf","total-time","subs-time","cljs.core.transduce","day8.re-frame-10x.metamorphic/subscription?","render-time","G__38821","G__38822","G__38823","G__38824","map__38828","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","event-time","event-handler-time","event-dofx-time","event-run-time","remaining-interceptors","G__38831","G__38832","G__38833","G__38834","start-of-render","G__38835","G__38836","G__38837","G__38838","cljs.core/empty?","G__38839","G__38840","G__38841","G__38842","G__38843","G__38844","G__38845","G__38846","G__38847","G__38848","epoch","G__38849","G__38850","G__38851","G__38852","G__38853","G__38854","G__38855","G__38856","day8.re-frame-10x.subs/string!","cljs.spec.alpha/and-spec-impl","p1__38857#","cljs.core/string?","cljs.spec.alpha/def-impl","cljs.spec.alpha/nilable-impl","cljs.spec.alpha.every_impl","G__38887","cljs.core/coll?","cljs.core/pos-int?","cljs.core/any?","cljs.spec.alpha/map-spec-impl","G__38891","cljs.core/map?","G__38927","day8.re-frame-10x.subs/sub-type-value","sub-type","G__38928","cljs.core/Keyword","day8.re-frame-10x.subs/accumulate-sub-value","order","exp","total","temp__5733__auto__","js/Math.pow","cljs.core/rest","day8.re-frame-10x.subs/accumulate-sub-value-memoized","cljs.core/memoize","day8.re-frame-10x.subs/sub-sort-val","order-x","order-y","cljs.core/compare","day8.re-frame-10x.subs/sub-op-type->type","t","G__38933","p__38934","p__38935","vec__38936","vec__38939","day8.re-frame-10x.subs/prepare-pod-info","sub-info","sub-state","subscription","remove-fn","cljs.core._EQ_","me","cljs.core/constantly","subx","state","sub","cljs.core.pr_str","or__4126__auto__","G__38952","G__38953","G__38954","G__38955","G__38956","G__38957","G__38958","G__38959","G__38964","G__38965","G__38966","G__38967","G__38968","G__38969","G__38970","G__38971","G__38972","G__38973","G__38974","G__38975","G__38976","G__38977","G__38978","G__38979","G__38980","G__38981","p__38982","vec__38983","all-subs","ignore-unchanged-l2?","day8.re-frame-10x.metamorphic/unchanged-l2-subscription?","G__38986","G__38987","G__38988","G__38989","subs","cljs.core.mapcat","cljs.core/frequencies","G__38991","G__38992","G__38993","G__38994","counts","G__38995","G__38996","G__38997","G__38998","G__39001","G__39002","G__39003","G__39004","G__39011","G__39012","G__39013","G__39014","G__39022","G__39023","G__39024","G__39025","G__39037","G__39038","G__39039","G__39040","G__39041","G__39042","G__39043","G__39044","G__39048","G__39049","G__39054","G__39055","G__39056","G__39057","cljs.core.keep_indexed","i","temp__5739__auto__","code","cljs.core.map_indexed","cljs.core/vec","G__39065","G__39066","G__39067","G__39068","G__39069","G__39070","G__39071","G__39072","form","zprint.core/zprint-str","G__39073","G__39074","G__39075","G__39076","G__39077","G__39078","G__39079","G__39080","G__39081","G__39082","G__39083","G__39084","G__39085","G__39086","G__39087","G__39088","day8.re-frame-10x.subs/canvas","js/document.createElement","G__39089","G__39090","context","G__39091","G__39092","G__39093","G__39094","G__39095","G__39096","p__39097","vec__39098","window-width","char-width","G__39101","G__39102","G__39103","G__39104","G__39105","G__39106","component"],"sourcesContent":["(ns day8.re-frame-10x.subs\n  (:require [mranderson048.re-frame.v0v10v6.re-frame.core :as rf]\n            [day8.re-frame-10x.metamorphic :as metam]\n            [day8.re-frame-10x.utils.utils :as utils]\n            [clojure.string :as str]\n            [cljs.spec.alpha :as s]\n            [zprint.core :as zp]))\n\n(rf/reg-sub\n  :settings/root\n  (fn [db _]\n    (get db :settings)))\n\n(rf/reg-sub\n  :settings/panel-width%\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :panel-width%)))\n\n(rf/reg-sub\n  :settings/panel-width%-rounded\n  :<- [:settings/panel-width%]\n  ;; Rounds panel width to nearest n%\n  (fn [panel-width% [_ n]]\n    ;; https://stackoverflow.com/a/19621472\n    (/ (* (Math/ceil (/ (* panel-width% 100)\n                        n))\n          n)\n       100.0)))\n\n(rf/reg-sub\n  :settings/window-width\n  ;; Prefer window-width-rounded if you don't need the exact number of pixels.\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :window-width)))\n\n(rf/reg-sub\n  :settings/window-width-rounded\n  :<- [:settings/window-width]\n  ;; Window width, rounded up to the nearest n pixels.\n  ;; Useful when you want to respond to window size changes\n  ;; but not too many of them.\n  (fn [width [_ n]]\n    (* (Math/ceil (/ width n))\n       n)))\n\n(rf/reg-sub\n  :settings/show-panel?\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :show-panel?)))\n\n(rf/reg-sub\n  :settings/selected-tab\n  :<- [:settings/root]\n  (fn [settings _]\n    (if (:showing-settings? settings)\n      :settings\n      (get settings :selected-tab))))\n\n(rf/reg-sub\n  :settings/number-of-retained-epochs\n  :<- [:settings/root]\n  (fn [settings]\n    (:number-of-epochs settings)))\n\n(rf/reg-sub\n  :settings/ignored-events\n  :<- [:settings/root]\n  (fn [settings]\n    (sort-by :sort (vals (:ignored-events settings)))))\n\n(rf/reg-sub\n  :settings/filtered-view-trace\n  :<- [:settings/root]\n  (fn [settings]\n    (sort-by :sort (vals (:filtered-view-trace settings)))))\n\n(rf/reg-sub\n  :settings/low-level-trace\n  ;; TODO: filter from traces panel\n  ;; TODO: eventually drop these low level traces after computing the state we need from them.\n  :<- [:settings/root]\n  (fn [settings]\n    (:low-level-trace settings)))\n\n(rf/reg-sub\n  :settings/debug?\n  :<- [:settings/root]\n  (fn [settings]\n    (:debug? settings)))\n\n(rf/reg-sub\n  :settings/app-db-follows-events?\n  :<- [:settings/root]\n  (fn [settings]\n    (:app-db-follows-events? settings)))\n\n;; App DB\n\n(rf/reg-sub\n  :app-db/root\n  (fn [db _]\n    (get db :app-db)))\n\n(rf/reg-sub\n  :app-db/current-epoch-app-db-after\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :app-db-after])))\n\n(rf/reg-sub\n  :app-db/current-epoch-app-db-before\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :app-db-before])))\n\n(rf/reg-sub\n  :app-db/paths\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (map #(assoc (val %) :id (key %))\n         (get app-db-settings :paths))))\n\n(rf/reg-sub\n  :app-db/search-string\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (get app-db-settings :search-string)))\n\n(rf/reg-sub\n  :app-db/expansions\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (get app-db-settings :json-ml-expansions)))\n\n(rf/reg-sub\n  :app-db/node-expanded?\n  :<- [:app-db/expansions]\n  (fn [expansions [_ path]]\n    (contains? expansions path)))\n\n(rf/reg-sub\n  :app-db/reagent-id\n  :<- [:app-db/root]\n  (fn [root _]\n    (:reagent-id root)))\n\n;;\n\n(rf/reg-sub\n  :traces/trace-root\n  (fn [db _]\n    (:traces db)))\n\n(rf/reg-sub\n  :trace-panel/root\n  (fn [db _]\n    (:trace-panel db)))\n\n(rf/reg-sub\n  :traces/filter-items\n  (fn [db _]\n    (get-in db [:traces :filter-items])))\n\n(rf/reg-sub\n  :traces/expansions\n  (fn [db _]\n    (get-in db [:traces :expansions])))\n\n(rf/reg-sub\n  :traces/categories\n  (fn [db _]\n    (get-in db [:traces :categories])))\n\n(rf/reg-sub\n  :traces/all-traces\n  :<- [:traces/trace-root]\n  (fn [traces _]\n    (:all-traces traces)))\n\n(rf/reg-sub\n  :traces/number-of-traces\n  :<- [:traces/all-traces]\n  (fn [traces _]\n    (count traces)))\n\n(rf/reg-sub\n  :traces/current-event-traces\n  :<- [:traces/all-traces]\n  :<- [:epochs/beginning-trace-id]\n  :<- [:epochs/ending-trace-id]\n  (fn [[traces beginning ending] _]\n    (into [] (utils/id-between-xf beginning ending) traces)))\n\n(defn filter-ignored-views [[traces filtered-views] _]\n  (let [munged-ns (->> filtered-views\n                       (map (comp munge :ns-str))\n                       (set))]\n    (into []\n          ;; Filter out view namespaces we don't care about.\n          (remove\n            (fn [trace] (and (metam/render? trace)\n                             (contains? munged-ns (subs (:operation trace) 0 (str/last-index-of (:operation trace) \".\"))))))\n          traces)))\n\n(rf/reg-sub\n  :traces/current-event-visible-traces\n  :<- [:traces/current-event-traces]\n  :<- [:settings/filtered-view-trace]\n  filter-ignored-views)\n\n(rf/reg-sub\n  :traces/all-visible-traces\n  :<- [:traces/all-traces]\n  :<- [:settings/filtered-view-trace]\n  filter-ignored-views)\n\n(rf/reg-sub\n  :trace-panel/show-epoch-traces?\n  :<- [:trace-panel/root]\n  (fn [trace-root]\n    (:show-epoch-traces? trace-root)))\n\n;;\n\n(rf/reg-sub\n  :global/unloading?\n  (fn [db _]\n    (get-in db [:global :unloading?])))\n\n;;\n\n(rf/reg-sub\n  :snapshot/snapshot-root\n  (fn [db _]\n    (:snapshot db)))\n\n(rf/reg-sub\n  :snapshot/snapshot-ready?\n  :<- [:snapshot/snapshot-root]\n  (fn [snapshot _]\n    (contains? snapshot :current-snapshot)))\n\n;;\n\n(rf/reg-sub\n  :epochs/epoch-root\n  (fn [db _]\n    (:epochs db)))\n\n(rf/reg-sub\n  :epochs/current-match-state\n  :<- [:epochs/epoch-root]\n  :<- [:epochs/match-ids]\n  (fn [[epochs match-ids] _]\n    (let [current-id (:current-epoch-id epochs)\n          match      (cond\n                       (nil? current-id) (last (:matches epochs))\n                       (< current-id (first match-ids)) (first (:matches epochs))\n                       ;; This case seems impossible, but can happen if the user filters out\n                       ;; an event that they are 'on'.\n                       (> current-id (last match-ids)) (last (:matches epochs))\n                       :else (get (:matches-by-id epochs) current-id))]\n      match)))\n\n(rf/reg-sub\n  :epochs/current-match\n  :<- [:epochs/current-match-state]\n  (fn [match-state _]\n    (:match-info match-state)))\n\n(rf/reg-sub\n  :epochs/current-event-trace\n  :<- [:epochs/current-match]\n  (fn [match _]\n    (metam/matched-event match)))\n\n(rf/reg-sub\n  :epochs/current-event\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :event])))\n\n(rf/reg-sub\n  :epochs/number-of-matches\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (count (get epochs :matches))))\n\n(rf/reg-sub\n  :epochs/current-event-index\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (:current-epoch-index epochs)))\n\n(rf/reg-sub\n  :epochs/current-epoch-id\n  :<- [:epochs/current-match]\n  (fn [epochs _]\n    (:id (first epochs))))\n\n(rf/reg-sub\n  :epochs/match-ids\n  :<- [:epochs/epoch-root]\n  (fn [epochs]\n    (:match-ids epochs)))\n\n(rf/reg-sub\n  :epochs/beginning-trace-id\n  :<- [:epochs/current-match]\n  (fn [match]\n    (:id (first match))))\n\n(rf/reg-sub\n  :epochs/ending-trace-id\n  :<- [:epochs/current-match]\n  (fn [match]\n    (:id (last match))))\n\n(rf/reg-sub\n  :epochs/older-epochs-available?\n  :<- [:epochs/current-epoch-id]\n  :<- [:epochs/match-ids]\n  (fn [[current ids]]\n    (and (< 1 (count ids))\n         (or (nil? current)\n             (> current (nth ids 0))))))\n\n(rf/reg-sub\n  :epochs/newer-epochs-available?\n  :<- [:epochs/current-epoch-id]\n  :<- [:epochs/match-ids]\n  (fn [[current ids]]\n    (and (< 1 (count ids))\n         (some? current)\n         (< current (utils/last-in-vec ids)))))\n\n;;\n\n(rf/reg-sub\n  :timing/total-epoch-time\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (let [start-of-epoch (nth traces 0)\n          end-of-epoch   (utils/last-in-vec traces)]\n      (metam/elapsed-time start-of-epoch end-of-epoch))))\n\n(rf/reg-sub\n  :timing/animation-frame-traces\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (filter #(or (metam/request-animation-frame? %)\n                 (metam/request-animation-frame-end? %))\n            traces)))\n\n(rf/reg-sub\n  :timing/animation-frame-count\n  :<- [:timing/animation-frame-traces]\n  (fn [frame-traces]\n    (count (filter metam/request-animation-frame? frame-traces))))\n\n(defn ^number +nil\n  \"Returns the sum of nums. (+) returns nil (not 0 like in cljs.core).\"\n  ([] nil)\n  ([x] x)\n  ([x y] (cljs.core/+ x y))\n  ([x y & more]\n   (reduce + (cljs.core/+ x y) more)))\n\n(rf/reg-sub\n  :timing/animation-frame-time\n  :<- [:timing/animation-frame-traces]\n  :<- [:traces/current-event-traces]\n  (fn [[af-start-end epoch-traces] [_ frame-number]]\n    (let [frame-pairs (partition 2 af-start-end)\n          [start end] (nth frame-pairs (dec frame-number))\n          af-traces   (into [] (metam/id-between-xf (:id start) (:id end)) epoch-traces)\n          total-time  (metam/elapsed-time start end)\n          ;; TODO: these times double count renders/subs that happened as a child of another\n          ;; need to fix either here, at ingestion point, or most preferably in re-frame at tracing point.\n          subs-time   (transduce (comp\n                                   (filter metam/subscription?)\n                                   (map :duration))\n                                 +nil af-traces)\n          render-time (transduce (comp\n                                   (filter metam/render?)\n                                   (map :duration))\n                                 +nil af-traces)]\n      {:timing/animation-frame-total  total-time\n       :timing/animation-frame-subs   subs-time\n       :timing/animation-frame-render render-time\n       ;; TODO: handle rounding weirdness here, make sure it is never below 0.\n       :timing/animation-frame-misc   (- total-time subs-time render-time)})))\n\n(rf/reg-sub\n  :timing/event-processing-time\n  :<- [:epochs/current-match-state]\n  (fn [match]\n    (let [{:re-frame/keys [event-time event-handler-time event-dofx-time event-run-time]} (get match :timing)\n          ;; The scope of tracing is:\n          ;; event-run-time\n          ;;   event-time\n          ;;     event-handler-time\n          ;;     event-dofx-time\n          ;;     <other stuff>\n          ;;   <other stuff>\n          remaining-interceptors (- event-time event-handler-time event-dofx-time)]\n      {:timing/event-total        event-run-time\n       :timing/event-handler      event-handler-time\n       :timing/event-effects      event-dofx-time\n       :timing/event-interceptors remaining-interceptors\n       ;; TODO: look at splitting out interceptors from misc, there was a suspiciously high amount of time\n       ;; in misc on some events, so that needs to be investigated.\n       ; :timing/event-misc (- event-run-time event-time)\n       :timing/event-misc         (- event-run-time event-handler-time event-dofx-time)})))\n\n(rf/reg-sub\n  :timing/render-time\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (let [start-of-render (first (filter metam/request-animation-frame? traces))\n          end-of-epoch    (utils/last-in-vec traces)]\n      (metam/elapsed-time start-of-render end-of-epoch))))\n\n(rf/reg-sub\n  :timing/data-available?\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (not (empty? traces))))\n\n;;\n\n(rf/reg-sub\n  :subs/root\n  (fn [db _]\n    (:subs db)))\n\n(rf/reg-sub\n  :subs/all-sub-traces\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (filter metam/subscription? traces)))\n\n(rf/reg-sub\n  :subs/subscription-info\n  :<- [:epochs/epoch-root]\n  (fn [epoch]\n    (:subscription-info epoch)))\n\n(rf/reg-sub\n  :subs/sub-state\n  :<- [:epochs/epoch-root]\n  (fn [epochs]\n    (:sub-state epochs)))\n\n(rf/reg-sub\n  :subs/current-epoch-sub-state\n  :<- [:epochs/current-match-state]\n  (fn [match-state]\n    (:sub-state match-state)))\n\n(def string! (s/and string? #(not (empty? %))))\n\n(s/def :sub/id string!)\n(s/def :sub/reagent-id string!)\n(s/def :sub/run-types #{:sub/create :sub/dispose :sub/run :sub/not-run})\n(s/def :sub/order (s/nilable (s/coll-of :sub/run-types)))\n(s/def :sub/layer (s/nilable pos-int?))\n(s/def :sub/path-data any?)\n(s/def :sub/path string!)\n(s/def :sub/value any?)\n(s/def :sub/previous-value any?)\n(s/def :subs/view-panel-sub\n  (s/keys :req-un [:sub/id :sub/reagent-id :sub/order :sub/layer :sub/path-data :sub/path]\n          :opt-un [:sub/value :sub/previous-value]))\n(s/def :subs/view-subs (s/coll-of :subs/view-panel-sub))\n\n(defn sub-type-value\n  [sub-type]\n  (case sub-type\n    :sub/create 5\n    :sub/run 4\n    :sub/dispose 3\n    :sub/not-run 2\n    1))\n\n(defn accumulate-sub-value\n  \"Calculate a sorting value for a series of subscription trace types.\"\n  ;; A reader might reasonably ask, \"Why are we going to all this work here?\"\n  ;; We calculate a custom value rather than just comparing two order vectors,\n  ;; because the default compare logic for comparing vectors is to sort shorter\n  ;; vectors above longer ones, whereas we want all CRR, CR, C orders to be\n  ;; sorted adjacent to each other, in that order.\n  ;;\n  ;; The first sub type in the order is worth (n * 10^3),\n  ;; then the next one (if it exists), is worth (n * 10^2), and so-on.\n  [order]\n  (loop [exp   3\n         total 0\n         order order]\n    (if-let [sub-type (first order)]\n      (recur (dec exp) (+ total (* (sub-type-value sub-type) (js/Math.pow 10 exp))) (rest order))\n      total)))\n\n(def accumulate-sub-value-memoized\n  (memoize accumulate-sub-value))\n\n(defn sub-sort-val [order-x order-y]\n  ;; Note x and y are reversed here so that the \"highest\" sub orders get sorted first.\n  (compare (accumulate-sub-value-memoized order-y)\n           (accumulate-sub-value-memoized order-x)))\n\n(defn sub-op-type->type [t]\n  (case (:op-type t)\n    :sub/create :created\n    :sub/run :re-run\n    :sub/dispose :destroyed\n\n    :not-run))\n\n(defn prepare-pod-info\n  \"Returns sub info prepared for rendering in pods\"\n  [[sub-info sub-state] [subscription]]\n  (let [remove-fn (if (= subscription :subs/intra-epoch-subs)\n                    (fn [me] (nil? (:order (val me))))\n                    (constantly false))\n        subx      (->> sub-state\n                       (remove remove-fn)\n                       (map (fn [me] (let [state        (val me)\n                                           subscription (:subscription state)\n                                           sub          {:id         (key me)\n                                                         :reagent-id (key me)\n                                                         :layer      (get-in sub-info [(first subscription) :layer])\n                                                         :path-data  subscription\n                                                         :path       (pr-str subscription)\n                                                         :order      (or (:order state) [:sub/not-run])\n                                                         :sub/traits (:sub/traits state)}\n                                           sub          (if (contains? state :value)\n                                                          (assoc sub :value (:value state))\n                                                          sub)\n                                           sub          (if (contains? state :previous-value)\n                                                          (assoc sub :previous-value (:previous-value state))\n                                                          sub)]\n                                       sub)))\n                       (sort-by :order sub-sort-val)        ;; Also sort by subscription-id\n                       #_(sort-by :path))]\n    subx))\n\n\n(rf/reg-sub\n  :subs/pre-epoch-state\n  :<- [:subs/current-epoch-sub-state]\n  (fn [sub-state]\n    (:pre-epoch-state sub-state)))\n\n(rf/reg-sub\n  :subs/reaction-state\n  :<- [:subs/current-epoch-sub-state]\n  (fn [sub-state]\n    (:reaction-state sub-state)))\n\n(rf/reg-sub\n  :subs/intra-epoch-subs\n  :<- [:subs/subscription-info]\n  :<- [:subs/pre-epoch-state]\n  prepare-pod-info)\n\n(rf/reg-sub\n  :subs/all-subs\n  :<- [:subs/subscription-info]\n  :<- [:subs/reaction-state]\n  prepare-pod-info)\n\n(rf/reg-sub\n  :subs/visible-subs\n  :<- [:subs/all-subs]\n  :<- [:subs/ignore-unchanged-l2-subs?]\n  (fn [[all-subs ignore-unchanged-l2?]]\n    (if ignore-unchanged-l2?\n      (remove metam/unchanged-l2-subscription? all-subs)\n      all-subs)))\n\n(rf/reg-sub\n  :subs/sub-counts\n  :<- [:subs/visible-subs]\n  (fn [subs _]\n    (->> subs\n         (mapcat :order)\n         (frequencies))))\n\n(rf/reg-sub\n  :subs/created-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/create 0)))\n\n(rf/reg-sub\n  :subs/re-run-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/run 0)))\n\n(rf/reg-sub\n  :subs/destroyed-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/dispose 0)))\n\n(rf/reg-sub\n  :subs/not-run-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/not-run 0)))\n\n(rf/reg-sub\n  :subs/unchanged-l2-subs-count\n  :<- [:subs/all-subs]\n  (fn [subs]\n    (count (filter metam/unchanged-l2-subscription? subs))))\n\n(rf/reg-sub\n  :subs/ignore-unchanged-l2-subs?\n  :<- [:subs/root]\n  (fn [subs _]\n    (:ignore-unchanged-subs? subs true)))\n\n(rf/reg-sub\n  :subs/sub-expansions\n  :<- [:subs/root]\n  (fn [subs _]\n    (:expansions subs)))\n\n\n;;\n\n(rf/reg-sub\n  :code/root\n  (fn [db _]\n    (:code db)))\n\n(rf/reg-sub\n  :code/current-code\n  :<- [:traces/current-event-traces]\n  (fn [traces _]\n    (keep-indexed (fn [i trace]\n                    (when-some [code (get-in trace [:tags :code])]\n                      {:id       i\n                       :trace-id (:id trace)\n                       :title    (pr-str (:op-type trace))\n                       :code     (->> code (map-indexed (fn [i code] (assoc code :id i))) vec) ;; Add index\n                       :form     (get-in trace [:tags :form])}))\n                  traces)))\n\n(rf/reg-sub\n  :code/current-form\n  :<- [:code/current-code]\n  (fn [code _]\n    (:form (first code))))\n\n(rf/reg-sub\n  :code/current-zprint-form\n  :<- [:code/current-form]\n  (fn [form _]\n    (zp/zprint-str form)))\n\n(rf/reg-sub\n  :code/code-open?\n  :<- [:code/root]\n  (fn [code _]\n    (:code-open? code)))\n\n(rf/reg-sub\n  :code/highlighted-form\n  :<- [:code/root]\n  (fn [code _]\n    (:highlighted-form code)))\n\n(rf/reg-sub\n  :code/show-all-code?\n  :<- [:code/root]\n  (fn [code _]\n    (:show-all-code? code)))\n\n(rf/reg-sub\n  :code/repl-msg-state\n  :<- [:code/root]\n  (fn [code _]\n    (:repl-msg-state code)))\n\n(def canvas (js/document.createElement \"canvas\"))\n\n(rf/reg-sub\n  :code/single-character-width\n  (fn [_ _]\n    (let [context (.getContext canvas \"2d\")]\n      (set! (.-font context) \"monospace 1em\")\n      (.-width (.measureText context \"T\")))))\n\n(rf/reg-sub\n    :code/max-column-width\n    :<- [:settings/window-width-rounded 100]\n    :<- [:code/single-character-width]\n    ;; It seems like it would be possible to do something smarter responding to panel sizing,\n    ;; but that introduces a lot of jank, so we just set to maximum possible window width.\n    (fn [[window-width char-width] _]\n      (Math/ceil (/ window-width\n                    char-width))))\n\n;;\n\n(rf/reg-sub\n  :component/root\n  (fn [db _]\n    (:component db)))\n\n(rf/reg-sub\n  :component/direction\n  :<- [:component/root]\n  (fn [component _]\n    (:direction component)))\n"]}